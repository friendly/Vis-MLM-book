## Animated tours

In the mid 17$^{th}$  to early 19$^{th}$-century the **Grand Tour**
became a coming-of-age custom for young Europeans 
(mainly British nobility and landed gentry)
of sufficient rank and means to undertake a journey to the principal sites of Europe
(Paris, Geneva, Rome, Athens, ...) to complete their education by learning something of
the cultural legacies in history, art, and music from antiquity to the Renaissance.
Thereby, they could gain a wider appreciation of history and be prepared to play
a role in polite society or in their chosen endeavors.

Travels in high-dimensional data space might be less thrilling than a journey
from London through Paris and Millan to Rome. Yet, in both cases it is useful to
think of the path taken, and what might be seen along the way.
But there are different kinds of tours. We might simply take a meandering tour,
exploring all the way, or want to plan a tour to see the most interesting 
sites in travel or have a tour guided by an expert.
Similarly in data space, we might travel randomly to see what we can find
or be guided to find interesting features such as clusters, outliers or non-linear relations in data.

Following the demonstration in PRIM-9 (@sec-discoveries) of exploring multidimensional
data space by rotation @Asimov:85 developed the idea of the _grand tour_,
a computer method for viewing multivariate statistical data via orthogonal projections onto an animated
sequence of low-dimensional subspaces, like a movie.
In contrast to a scatterplot matrix which shows a static view of a data cloud projected onto
all pairwise variable axes, a statistical tour is like the view of an eye moving smoothly in high-dimensional
space, capturing what it sees from a given location onto the 2-d plane of the computer screen.

More generally, statistical tours are a type of dynamic projections onto orthogonal axes (called a _basis_)
that embed data in a
$p$−dimensional space into a $d$−dimensional viewing subspace. Typically, $d=2$, and 
the result is displayed as scatterplots, together with vectors representing the projections of the data variables in this space.
But the projected data can be rendered in 1-d as densities or histograms, or in other number of dimensions as glyphs,
or even as parallel coordinate plots.
The essential idea is that we can define, and animate, a _tour path_ as a smooth sequence of such projections
over small changes to the projection basis, which gives the orientation of the data in the viewing space.

### Projections

The idea of a projection is fundamental to touring methods and other visualizations of high-D data, so it is useful to understand
what a projection is. Quite simply, you can think of a projection as the shadow of an object or cloud of points. 
This is nicely illustrated by the cover image (@fig-cover-GBE) used for Douglas Hofstadter's [-@Hofstadter1979] _Gödel, Bach and Escher_
which shows 3D solid shapes illuminated by light sources so their shadows form the letters G, B and E projected onto the planes
formed by pairs of the three coordinate axes. The set of three 2D views is essentially the same that we see in a scatterplot matrix,
where a 3D dataset is portrayed by the set of shadows of the points on planes formed by pairs of coordinate axes.

```{r}
#| label: fig-cover-GBE
#| echo: false
#| out-width: "40%"
#| fig-cap: "The cover image from @Hofstadter1979 illustrates how projections are shadows of an object cast by a light from a given direction."
knitr::include_graphics("images/Cover-GBE.png")
```


In the simplest case, a data point $\mathbf{x} = (x_1, x_2)$ in two dimensions can be represented geometrically as a vector from the
origin as shown in @fig-projection. This point can be projected on any one-dimensional axis $\mathbf{p}$ by dropping a line
perpendicular to $\mathbf{p}$, which is the idea of a shadow. Mathematically, this is calculated as the product 
$\mathbf{x}^T \mathbf{p} = x_1 p_1 + x_2 p_2$ and suitably normalized to give the correct length. ...

```{r}
#| label: fig-projection
#| echo: false
#| out-width: "40%"
#| fig-cap: "Projection of a point **x** onto a direction or axis **p**."
knitr::include_graphics("images/projection.png")
```



More generally, a projection of an $(n \times p)$ data matrix $\mathbf{X}$ representing $n$ observations in $p$
dimensions onto a $d$-dimensional viewing space $\mathbf{Y}_{n \times d}$ is represented by a $p \times d$ projection matrix $\mathbf{P}$
as $\mathbf{Y} = \mathbf{X} \mathbf{P}$, where the columns of $\mathbf{P}$ are orthogonal and of unit length,i.e., 
$\mathbf{P}^T \mathbf{P} = \mathbf{I}_{(d \times d)}$.

For example, to project a data matrix $\mathbf{X}$ in three dimensions onto a 2D plane, we would multiply it by a $(3 \times 2)$ orthonormal
matrix $\mathbf{P}$. The matrix $\mathbf{P}_1$ below simply selects the first two columns of $\mathbf{X}$.[^ref-Cook]

[^ref-Cook]: This example was modified from one used by @Cook-etal-2008.

$$
\mathbf{X} =
\begin{bmatrix} 
    0 & 0 & 0 \\ 
    0 & 0 & 10 \\ 
    0 & 10 & 0 \\ 
    0 & 10 & 10 \\ 
    10 & 0 & 0 \\ 
    10 & 0 & 10 \\ 
    10 & 10 & 0 \\ 
    10 & 10 & 10 \\ 
 \end{bmatrix}_{8 \times 3}
 ;\;
 \mathbf{P_1} =
 \begin{bmatrix} 
    1 & 0 \\ 
    0 & 1 \\ 
    0 & 0 \\ 
 \end{bmatrix}_{3 \times 2} 
 \;\Rightarrow\quad
 \mathbf{Y} = \mathbf{X} \; \mathbf{P_1} =
 \begin{bmatrix} 
    0 & 0 \\ 
    0 & 0 \\ 
    0 & 10 \\ 
    0 & 10 \\ 
    10 & 0 \\ 
    10 & 0 \\ 
    10 & 10 \\ 
    10 & 10 \\ 
 \end{bmatrix}_{8 \times 2} 
$$
An oblique projection using all three dimensions is given by $\mathbf{P_2}$ below. This produces a new 2D view in $\mathbf{Y}$:
$$
 \mathbf{P_2} =
\begin{bmatrix} 
    0.71 & -0.42 \\ 
    0.71 & 0.42 \\ 
    0 & 0.84 \\ 
 \end{bmatrix}_{3 \times 2}
 \quad\Rightarrow\quad
 \mathbf{Y} = \mathbf{X} \; \mathbf{P_2} =
\begin{bmatrix} 
    0 & 0 \\ 
    0 & 8.4 \\ 
    7.1 & 4.2 \\ 
    7.1 & 12.6 \\ 
    7.1 & -4.2 \\ 
    7.1 & 4.2 \\ 
    14.2 & 0 \\ 
    14.2 & 8.4 \\ 
 \end{bmatrix} 
$$

The columns in $\mathbf{Y}$ are simply the linear combinations of those of $\mathbf{X}$ using the weights in each column of $\mathbf{P_2}$

$$
\begin{eqnarray*}
\mathbf{y}_1 & = & 0.71 \mathbf{x}_1 + 0.71 \mathbf{x}_2 + 0 \mathbf{x}_3\\
\mathbf{y}_2 & = & -0.42 \mathbf{x}_1 + 0.42 \mathbf{x}_2 + 0.84 \mathbf{x}_3 \\
\end{eqnarray*}
$$

```{r}
#| code-fold: true
vals <- c(0, 10)
X <- expand.grid(x1 = vals, x2=vals, x3=vals) |> as.matrix()

# project on just x1, x2 plane
P1 <- rbind(diag(2), c(0,0))
Y1 <- X %*% P1

# oblique projection
P2 <- matrix(c(0.71, 0.71, 0, -0.42, .42, 0.84), ncol=2)
Y2 <- X %*% P2
```


In this example, the matrix $\mathbf{X}$ consists of 8 points at the vertices of a cube of size 10, as shown in @fig-proj-combined (a).
The projections $\mathbf{Y}_1 = \mathbf{P}_1 \mathbf{X}$ and $\mathbf{Y}_2 = \mathbf{P}_2 \mathbf{X}$ are shown in panels (b) and (c).
To make it easier to relate the points in different views, shapes and colors are assigned so that each point has a unique combination
of these attributes.[^pch]

[^pch]: Plot shapes given by `pch = 15:18` correspond to: 
filled square (15),
filled circle (16),
filled triangle point-up (17),
filled diamond (18).

```{r pch-col}
pch <- rep(15:18, times = 2)
colors <- c("red", "blue", "darkgreen", "brown")
col <- rep(colors, each = 2)
data.frame(X, pch, col)
```


```{r}
#| label: fig-proj-combined
#| echo: false
#| out-width: "100%"
#| fig-cap: "**Projection example**: (a) The 8 points in **X** form a cube of size 10; (b) the projection by **P1** is the view ignoring **x3** (two points coincide at each vertex); (c) the projection by **P2** is an oblique view."
knitr::include_graphics("images/proj-combined.png")
```

But, if we are traveling in the projection space of $\mathbf{Y}$, we need some signposts to tell us how the new dimensions relate to those
of $\mathbf{X}$. The answer is provided simply by plotting the rows of $\mathbf{P}$ as vectors, as shown in @fig-proj-vectors.
In these plots, each row of $\mathbf{P}_1$ and $\mathbf{P}_2$ appears as a vector from the origin. It's direction shows the contribution each of 
$\mathbf{x}_1, \mathbf{x}_2, \mathbf{x}_3$ make to the new coordinates $\mathbf{y}_1$ and $\mathbf{y}_2$.

In $\mathbf{P}_1$, the projected variable $\mathbf{y}_1$ is related only to $\mathbf{x}_1$, while $\mathbf{y}_2$ is related only to $\mathbf{x}_2$
$\mathbf{x}_3$ makes no contribution, and appears at the origin. However in the projection given by $\mathbf{P}_2$, $\mathbf{x}_1$ and $\mathbf{x}_2$ make the same contribution
to $\mathbf{y}_1$, while $\mathbf{x}_3$ has no contribution to that horizontal axis.
The vertical axis, $\mathbf{y}_2$ here is completely aligned with $\mathbf{x}_3$; $\mathbf{x}_1$ and $\mathbf{x}_2$ have vertical components
that are half of that for $\mathbf{x}_3$ in absolute value. 

```{r}
#| label: proj-vectors
#| code-fold: true
#| eval: false
#| fig-show: hide
#| layout-ncol: 2
library(matlib)
op <- par(mar=c(4, 5, 1, 1)+.1)
xlim <- ylim <- c(-1.1, 1.1)
axes.x <- c(-1, 1, NA, 0, 0)
axes.y <- c(0, 0, NA, -1, 1)
labs <- c(expression(x[1]), expression(x[2]), expression(x[3]))
plot(xlim, ylim, type = "n", asp=1,
     xlab = expression(y[1]), ylab = expression(y[2]),
     cex.lab = 1.8)
circle(0, 0, 1, col = adjustcolor("skyblue", alpha = 0.2))
lines(axes.x, axes.y, col = "grey")
vectors(P1, labels = labs, cex.lab = 1.8, lwd = 3, pos.lab = c(4, 2, 1))

plot(xlim, ylim, type = "n", asp=1,
     xlab = expression(y[1]), ylab = expression(y[2]),
     cex.lab = 1.8)
circle(0, 0, 1, col = adjustcolor("skyblue", alpha = 0.2))
lines(axes.x, axes.y, col = "grey")
vectors(P2, labels = labs, cex.lab = 1.8, lwd = 3)
par(op)
```

```{r}
#| label: fig-proj-vectors
#| echo: false
#| out-width: "100%"
#| fig-cap: "**Variable vectors**: Data variables viewed as vectors in the space of their projections. The angles of the **x** vectors with respect to the **y** coordinate axes show their relative contributions to each. The lengths of the **x** vectors show the relative degree to which they are represented in the space of **y**s. Left: the **P1** projection; right: the **P2** projection."
knitr::include_graphics("images/proj-vectors.png")
```

#### Vector lengths
In @fig-proj-vectors, the **lengths** of the $\mathbf{x}$ vectors reflect the relative degree to which each variable is represented in the space of the projection, and this is important for interpretation.
For the $\mathbf{P}_1$ projection, $\mathbf{x}_3$ is of length 0, while $\mathbf{x}_1$ and $\mathbf{x}_2$ fill the unit circle. In the projection given by $\mathbf{P}_2$, all three $\mathbf{x}$ are approximately
the same length. 

In algebra, the length of a vector $\mathbf{x}$ is 
$||\mathbf{x}|| = (\mathbf{x}^T \mathbf{x})^{1/2} = \sqrt{\Sigma x_i^2}$, the Euclidean distance of the tip of the vector from the origin.
In R, we calculate the lengths of row vectors in a projection matrix by transposing and using `matlib::len()`.

```{r}
P1 |> t() |> matlib::len()
P2 |> t() |> matlib::len()
```


#### Joint-views
To interpret such projections, we want to see **both** the projected data and the signposts that tell us where we are
in relation to the original variables.
To do this, we can overlay the variable vectors represented by the rows of the projection matrix $\mathbf{P}$
onto plots like @fig-proj-combined (b)
and @fig-proj-combined (c) to see how the axes in a projection relate to those in the data. 
To place these together on the same plot, we can either center the columns of $\mathbf{Y}$ at their means or shift the 
the columns of $\mathbf{P}$ to `colMeans(Y)`. It is only the directions of the vectors that matters, so we are free
to scale their lengths by any convenient factor.

```{r}
#| label: proj-P2-vec
#| eval: false
#| code-fold: true
Y2s <- scale(Y2, scale=FALSE)       # center Y2
plot(Y2s, cex = 3, 
     asp = 1,
     pch = pch, col = col,
     xlab = expression(y[1]), ylab = expression(y[2]),
     xlim = c(-10, 10), ylim = c(-10, 10), cex.lab = 1.8)
r <- 7
vecs <- (r*diag(3) %*% P2)
vectors(vecs, labels = labs, cex.lab = 1.8, lwd = 2)
vectors(-vecs, labels = NULL, lty = 1, angle = 1, col = "gray")
```

The plot in @fig-proj-P2-vec illustrates this, centering $\mathbf{Y}$, and multiplying the vectors in $\mathbf{P}$ by 7.
To check your understanding, try to see if you can relate what is shown in this plot to the 3D plot in @fig-proj-combined (a).

```{r}
#| label: fig-proj-P2-vec
#| echo: false
#| out-width: "50%"
#| fig-cap: "The **P2** projection of the data showing vectors for the original variables in the space of **Y**."
knitr::include_graphics("images/proj-P2-vec.png")
```

The idea of viewing low-dimensional projections of data together with vectors representing the contributions of the
original variables to the dimensions shown in a display is also the basis of **biplot** techniques (@sec-biplot)
we will use in relation to principal components analysis.

### Touring methods
The trick of statistical touring methods is to generate a smooth sequence of interpolated projections $\mathbf{P}_{(t)}$
indexed by time $t$, $\mathbf{P}_{(1)}, \mathbf{P}_{(2)}, \mathbf{P}_{(3)}, \dots, \mathbf{P}_{(T)}$.
This gives a path of views $\mathbf{Y}_{(t)} = \mathbf{X} \mathbf{P}_{(t)}$, that can be animated in successive frames, as
shown schematically in @fig-peng-tourr-diagram.

```{r}
#| label: fig-peng-tourr-diagram
#| echo: false
#| out-width: "90%"
#| fig-cap: "**Interpolations**: Illustration of a grand tour of interpolations of projection planes showing 2D scatterplots of the Penguin dataset. The seqeunce of views moves smoothly from an initial frame **P(1)** to a final frame **P(T)** where the penguin species are widely separated."
knitr::include_graphics("images/peng-tourr-diagram.png")
```



Asimov's [-@Asimov:85] original idea of the grand tour was that of a random path, picking orthogonal projections $\mathbf{P}_{(i)}$ at random.
Given enough time, the grand tour gives a space-filling path and would eventually show every possible projection of the data. But it does so smoothly, by interpolating from one projection to the next.
In the travel analogy, the path by road from London to Paris might go smoothly through Kent to Dover,
thence via Amiens and Beauvais before reaching Paris. By air, the tour would follow a
smoother _geodesic_ path, and this is what the grand tour does. The sense in watching an animation of a statistical grand tour
is that of continuous motion.
The grand tour algorithm is described
in detail by @Buja-etal-2005 and @Cook-etal-2008.

<!-- Projection pursuit @Cook-etal-1995 -> guided tour -->

#### Guided tours
The next big idea was that rather than traveling randomly in projection space one could take a _guided tour_, following
a path that leads to "interesting projections", such as those that reveal clusters, gaps in data space or outliers.
This idea, called _projection pursuit_ [@Cook-etal-1995], works by defining a measure of interestingness of a data projection.
In a guided tour, the next projection is chosen to increase that index, so over time the projection moves toward one
that is maximizes that index.

In the time since @Asimov:85, there have been many implementations of touring visualization methods.
XGobi [@Swayne-etal-1998] for X-Windows displays on Linux systems provided a test-bed for dynamic, interactive graphic
methods; it's successor, GGobi [@Swayne-etal-2003;@CookSwayne:2007] extended the range of touring methods
to include a wider variety of projection pursuit indices.

#### `tourr` package
The current state of art is best captured in the **tourr** package for R [@Wickham-etal-2011;@R-tourr]. 
It defines a tour to consist of three components:

* **data**: An $(n \times p)$ numerical data matrix to be viewed.
* **path**: A tour path function that produces a smoothed sequence of projection matrices $\mathbf{P}_{(p \times d)}$ in $d$. dimensions, for example `grand_tour(d = 2)` or `guided_tour(index = holes)`.
* **display**: A function that renders the projected data, for example `display_xy()` for a scatterplot, `display_depth()` for a 3D plot with simulated depth, or `display_pcp()` for a parallel coordinates plots

This very nicely separates the aspects of a tour, and allows one to think of and define new tour path methods and display methods.
The package defines two general tour functions: `animate()` produces a real-time animation on a display device and 
`render()` saves image frames to disk, such as a `.gif` file.

```{r}
#| label: tour-functions
#| eval: false
animate(data, tour_path, display_method)
render(data, tour_path, display_method)
```

The **tourr** package provides a wide range of tour path methods and display methods:

```{r}
#| label:  tour-methods
# tour path methods
grep("_tour$", lsf.str("package:tourr"), value = TRUE)

# display methods
grep("display_", lsf.str("package:tourr"), value = TRUE)
```

Tour path methods take a variety of optional arguments to specify the detailed behavior of the method.
For example, most allow you to specify the number of dimension (`d =`) of the projections.
The `guided_tour()` is of particular interest here.

```{r}
args(guided_tour)
```

In this, `index_f` specifies a function that the method tries to optimize on its path and package defines four indices:

* Holes (`holes()`): This is sensitive to projections with separated clusters of points, with few points near the origin
* Central mass (`cmass()`): Sensitive to projections with lots of points in the center, but perhaps with some outliers
* Linear discriminant analysis (`lda_pp()`): For data with a grouping factor, optimizes a measure of separation of the group means as in MANOVA or linear discriminant analysis
* PDA analysis (`pda_pp()`): A penalized version of `lda_pp()` for cases of large $p$ relative to sample size $n$ @LeeCook-2009.


#### Penguin tours

Penguins are a traveling species. They make yearly travels inland to breeding sites in early spring, repeating the patterns of their ancestors. Near the beginning of summer, adult penguins and their chicks return to the sea and spend the rest of the summer feeding there. If they were also data scientists, they might wonder about the relations among
among their cousins of different genus and take a tour of their measurements...

Cite: Black et al Time-lapse imagery of Ade´lie penguins, https://doi.org/10.1371/journal.pone.0193532


For example, using the Penguins dataset, the following calls produce grand tours in 2, 3, and 4 dimensions.
The 2D tour is displayed as a scatterplot, the 3D tour using simulated depth as shown by variation in point size and transparency, and the 4D tour is shown using a parallel coordinate plot.

```{r}
#| label: peng-tour-demo
#| eval: false
data(peng, package = "heplots")
peng_scaled <- scale(peng[,3:6])
colnames(peng_scaled) <- c("BL", "BD", "FL", "BM")

animate(peng_scaled, grand_tour(d = 2), display_xy())
animate(peng_scaled, grand_tour(d = 3), display_depth())
animate(peng_scaled, grand_tour(d = 4), display_pcp())
```

```{r}
#| label: fig-peng-tour-demo
#| layout-ncol: 3
#| echo: false
#| out-width: "100%"
#| fig-cap: "Grand tours of the penguin dataset in 2, 3, and 4 dimensions using different `display_*()` methods."
#| fig-subcap: 
#|  - "2D, scatterplot"
#|  - "3D, simulated depth"
#|  - "4D, parallel coordinates plot"
knitr::include_graphics("images/peng-tour-demo1.png")
knitr::include_graphics("images/peng-tour-demo2.png")
knitr::include_graphics("images/peng-tour-demo3.png")
```

Let's take the penguins on a tour, motivated by finding views that show the greatest separations among the 
penguin species; that is, a guided tour, optimizing the `lda_pp()` index.
I'll abbreviate the variables to two characters,
"BL" = `bill_length`, "BD" = `bill_depth`, "FL" = `flipper_length`, and "BM" = `body_mass`.

```{r}
#| eval: false
data(peng, package = "heplots")
peng_scaled <- scale(peng[,3:6])
colnames(peng_scaled) <- c("BL", "BD", "FL", "BM")

animate(peng_scaled, 
        guided_tour(lda_pp(peng$species)),
        display = display_xy(col = col,
                             cex = 1.5))
```


::: {.content-visible unless-format="pdf"}
```{r}
#| label: fig-peng-tour-lda
#| out-width: "75%"
#| echo: false
#| fig-cap: "Animation of a grand tour of the Penguin data, using a guided tour designed to find an optimal separation among the penguin species."
knitr::include_graphics("images/peng-tourr-lda.gif")
```
:::

This example was intended to highlight what is possible with dynamic graphics for exploring high-dimensional data visually. But it also illustrates limitations in implementation in **tourr**.
Ideally, we should be able interact with a tour, pausing when we see something interesting and saving the view
for later analysis; selecting or highlighting unusual points, ...

Actually, that was done in Ggobi ...
There is a **tourGUI** package ...


