## Animated tours

In the mid 17$^{th}$  to early 19$^{th}$-century the **Grand Tour**
became a coming-of-age custom for young Europeans 
(mainly British nobility and landed gentry)
of sufficient rank and means to undertake a journey to the principal sites of Europe
(Paris, Geneva, Rome, Athens, ...) to complete their education by learning something of
the cultural legacies in history, art, and music from antiquity to the Renaissance.
Thereby, they could gain a wider appreciation of history and be prepared to play
a role in polite society or in their chosen endeavors.

Travels in high-dimensional data space might be less thrilling than a journey
from Oxford through Paris and Turin to Rome. Yet, in both cases it is useful to
think of the path taken, and what might be seen along the way.
But there are different kinds of tours. We might simply take a meandering tour,
exploring all the way, or want to plan a tour to see the most interesting 
sites in travel or have a tour guided by an expert.
Similarly in data space, we might travel randomly to see what we can find
or be guided to find interesting features such as clusters, outliers or non-linear relations in data.

Following the demonstration in PRIM-9 (@sec-discoveries) of exploring multidimensional
data space by rotation @Asimov:85 developed the idea of the _grand tour_,
a computer method for viewing multivariate statistical data via orthogonal projections onto an animated
sequence of low-dimensional subspaces, like a movie.
In contrast to a scatterplot matrix which shows a static view of a data cloud projected onto
all pairwise variable axes, a statistical tour is like the view of an eye moving smoothly in high-dimensional
space, capturing what it sees from a given location onto the 2-d plane of the computer screen.

More generally, statistical tours are a type of dynamic projections onto orthogonal axes (called a _basis_)
that embed data in a
$p$−dimensional space into a $d$−dimensional viewing subspace. Typically, $d=2$, and 
the result is displayed as scatterplots, together with vectors representing the projections of the data variables in this space.
But the projected data can be rendered in 1-d as densities or histograms, or in other number of dimensions as glyphs,
or even as parallel coordinate plots.
The essential idea is that we can define, and animate, a _tour path_ as a smooth sequence of such projections
over small changes to the projection basis, which gives the orientation of the data in the viewing space.

### Projections

The idea of a projection is fundamental to touring methods and other visualizations of high-D data, so it is useful to understand
what a projection is. Quite simply, you can think of a projection as the shadow of an object or cloud of points. 
This is nicely illustrated by the cover image (@fig-cover-GBE) used for Douglas Hofstadter's [-@Hofstadter1979] _Gödel, Bach and Escher_
which shows 3D solid shapes illuminated by light sources so their shadows form the letters G, B and E projected onto the planes
formed by pairs of the three coordinate axes. The set of three 2D views is essentially the same that we see in a scatterplot matrix.

```{r}
#| label: fig-cover-GBE
#| echo: false
#| out-width: "40%"
#| fig-cap: "The cover image from @Hofstadter1979 illustrates how projections are shadows of an object cast by a light from a given direction."
knitr::include_graphics("images/Cover-GBE.png")
```


In the simplest case, a data point $\mathbf{x} = (x_1, x_2)$ in two dimensions can be represented geometrically as a vector from the
origin as shown in @fig-projection. This point can be projected on any one-dimensional axis $\mathbf{p}$ by dropping a line
perpendicular to $\mathbf{p}$, which is the idea of a shadow. Mathematically, this is calculated as the product 
$\mathbf{x}^T \mathbf{p} = x_1 p_1 + x_2 p_2$ and suitably normalized to give the correct length. ...

```{r}
#| label: fig-projection
#| echo: false
#| out-width: "40%"
#| fig-cap: "Projection of a point **x** onto a direction or axis **p**."
knitr::include_graphics("images/projection.png")
```



More generally, a projection of an $(n \times p)$ data matrix $\mathbf{X}$ representing $n$ observations in $p$
dimensions onto a $d$-dimensional viewing space $\mathbf{Y}_{n \times d}$ is represented by a $p \times d$ projection matrix $\mathbf{P}$
as $\mathbf{Y} = \mathbf{X} \mathbf{P}$, where the columns of $\mathbf{P}$ are orthogonal and of unit length,i.e., 
$\mathbf{P}^T \mathbf{P} = \mathbf{I}_{(d \times d)}$.

For example, to project a data matrix $\mathbf{X}$ in three dimensions onto a 2D plane, we would multiply it by a $(3 \times 2)$ orthonormal
matrix $\mathbf{P}$. The matrix $\mathbf{P}_1$ below simply selects the first two columns of $\mathbf{X}$.
$$
\mathbf{X} =
\begin{bmatrix} 
    0 & 0 & 0 \\ 
    0 & 0 & 10 \\ 
    0 & 10 & 0 \\ 
    0 & 10 & 10 \\ 
    10 & 0 & 0 \\ 
    10 & 0 & 10 \\ 
    10 & 10 & 0 \\ 
    10 & 10 & 10 \\ 
 \end{bmatrix}_{8 \times 3}
 ;\quad
 \mathbf{P_1} =
 \begin{bmatrix} 
    1 & 0 \\ 
    0 & 1 \\ 
    0 & 0 \\ 
 \end{bmatrix}_{3 \times 2} 
 \quad\Rightarrow\quad
 \mathbf{Y} = \mathbf{X} \; \mathbf{P_1} =
 \begin{bmatrix} 
    0 & 0 \\ 
    0 & 0 \\ 
    0 & 10 \\ 
    0 & 10 \\ 
    10 & 0 \\ 
    10 & 0 \\ 
    10 & 10 \\ 
    10 & 10 \\ 
 \end{bmatrix}_{(8 \times 2)} 
$$
A different projection given by $\mathbf{P_2}$ gives a new $\mathbf{Y}$:
$$
 \mathbf{P_2} =
\begin{bmatrix} 
    0.71 & -0.42 \\ 
    0.71 & 0.42 \\ 
    0 & 0.84 \\ 
 \end{bmatrix}_{3 \times 2}
 \quad\Rightarrow\quad
 \mathbf{Y} = \mathbf{X} \; \mathbf{P_2} =
\begin{bmatrix} 
    0 & 0 \\ 
    0 & 8.4 \\ 
    7.1 & 4.2 \\ 
    7.1 & 12.6 \\ 
    7.1 & -4.2 \\ 
    7.1 & 4.2 \\ 
    14.2 & 0 \\ 
    14.2 & 8.4 \\ 
 \end{bmatrix} 
$$

The columns in $\mathbf{Y}$ are simply the linear combinations of those of $\mathbf{X}$ using the weights in each column of $\mathbf{P_2}$

$$
\begin{eqnarray*}
\mathbf{y}_1 & = & 0.71 \mathbf{x}_1 + 0.71 \mathbf{x}_2 \\
\mathbf{y}_2 & = & -0.42 \mathbf{x}_1 + 0.42 \mathbf{x}_2 + 0.84 \mathbf{x}_3 \\
\end{eqnarray*}
$$
In this example, the matrix $\mathbf{X}$ consists of 8 points at the vertices of a cube of size 10, as shown in @fig-proj-combined (a).
The projections $\mathbf{Y}_1 = \mathbf{P}_1 \mathbf{X}$ and $\mathbf{Y}_2 = \mathbf{P}_2 \mathbf{X}$ are shown in panels (b) and (c).
```{r}
#| label: fig-proj-combined
#| out-width: "100%"
#| fig-cap: "**Projection example**: (a) The 8 points in **X** form a cube of size 10; (b) the projection by **P1** is the view ignoring **x3**; (c) the projection by **P2** is an oblique view."
knitr::include_graphics("images/proj-combined.png")
```

### Touring methods
The trick of statistical touring methods is to generate a smooth sequence of interpolated projections $\mathbf{P}_{(t)}$
indexed by time $t$, $\mathbf{P}_{(1)}, \mathbf{P}_{(2)}, \mathbf{P}_{(3)}, \dots$
giving a path of views $\mathbf{Y}_{(t)} = \mathbf{X} \mathbf{P}_{(t)}$ that can be animated in successive frames, as
shown in @fig-peng-tourr-diagram.

```{r}
#| label: fig-peng-tourr-diagram
#| echo: false
#| out-width: "90%"
#| fig-cap: "Illustration of a grand tour of interpolations of projection planes showing 2D scatterplots of the Penguin dataset"
knitr::include_graphics("images/peng-tourr-diagram.png")
```



Asimov's [-@Asimov:85] original idea of the grand tour was that of a random path ...

In the time since @Asimov:85, there have been many implementations of touring visualization methods ...
XGobi -> GGobi @CookSwayne:2007 ->
-> tourr @Wickham-etal-2011

The current state of art is best captured in the **tourr** package [@R-tourr]. 


```{r}
#| eval: false
load(here::here("data", "peng.RData"))
peng_scaled <- scale(peng[,3:6])
source("R/penguin/penguin-colors.R")
col <- peng.colors()[peng$species]

animate(peng_scaled, 
        guided_tour(lda_pp(peng$species)),
        display = display_xy(col = col,
                             cex = 1.5,
                             edges.width = 2))
```


::: {.content-visible unless-format="pdf"}
```{r}
#| label: fig-peng-tour-lda
#| out-width: "60%"
#| echo: false
#| fig-cap: "Animation of a grand tour of the Penguin data."
knitr::include_graphics("images/peng-tourr-lda-crop.gif")
```
:::
